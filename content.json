{"meta":{"title":"小金的博客","subtitle":"","description":"极其稀有。","author":"Goldie","url":"https://jsblog.fun","root":"/"},"pages":[{"title":"分类","date":"2023-03-16T13:04:02.000Z","updated":"2023-03-16T13:10:34.289Z","comments":false,"path":"categories/index.html","permalink":"https://jsblog.fun/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2023-03-16T13:06:34.000Z","updated":"2023-04-17T12:48:32.183Z","comments":false,"path":"about/index.html","permalink":"https://jsblog.fun/about/index.html","excerpt":"","text":"很喜欢犬夜叉！ 如果有任何疑问，欢迎联系我的邮箱！ &#x6a;&#105;&#x6e;&#x73;&#104;&#117;&#111;&#48;&#53;&#49;&#x30;&#64;&#x31;&#54;&#x33;&#x2e;&#x63;&#111;&#109;"},{"title":"资源","date":"2023-03-16T13:06:46.000Z","updated":"2023-03-16T13:11:12.323Z","comments":false,"path":"resources/index.html","permalink":"https://jsblog.fun/resources/index.html","excerpt":"","text":""},{"title":"日历","date":"2023-03-16T13:07:15.000Z","updated":"2023-03-16T13:11:54.886Z","comments":false,"path":"schedule/index.html","permalink":"https://jsblog.fun/schedule/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-03-16T13:06:27.000Z","updated":"2023-03-16T13:12:31.227Z","comments":false,"path":"tags/index.html","permalink":"https://jsblog.fun/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"快速访问github","slug":"无魔法快速访问github","date":"2023-04-15T05:30:00.000Z","updated":"2023-04-16T08:01:56.689Z","comments":true,"path":"2023/04/15/无魔法快速访问github/","link":"","permalink":"https://jsblog.fun/2023/04/15/%E6%97%A0%E9%AD%94%E6%B3%95%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AEgithub/","excerpt":"使用Github开源项目加快访问Github","text":"使用Github开源项目加快访问Github 作为一个小趴菜，每天要靠github上的大神项目才能过活 但是访问github的速度竟然要靠运气！每天不是丢包就是在丢包的路上！ 这怎么能忍！ 于是我去搜索了github，看看怎么加速访问github，没想到还真被我找到了：Fastgithub Fastgithub的安装和使用进入github中Fastgithub库的地址 选择release，最新版的是2.1.4 我的电脑是windows系统，所以我们选择windows版本： 下载到电脑上后，解压后得到以下文件： 点击运行FastGithub.UI.exe，即可进入图形化界面，可视化界面 缺点是需要一直挂着，但是FastGithub提供了将FastGithub程序以服务方式进行的方式： 1234#开启fastgithub服务fastgithub.exe start#关闭fastgithub服务fastgithub.exe stop 开启后，可以在任务管理器中发现后台运行的fastgithub，重启后依然有效，这样就实现了无感直连Github的方式啦 以上就是Fastgithub的使用，个人使用下来目前还蛮舒服的，推荐Windows用户使用！","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://jsblog.fun/tags/Github/"}]},{"title":"基于Hexo和Next主题搭建的博客美化","slug":"基于Hexo和Next主题搭建的博客美化","date":"2023-04-15T02:00:00.000Z","updated":"2023-04-20T14:05:13.050Z","comments":true,"path":"2023/04/15/基于Hexo和Next主题搭建的博客美化/","link":"","permalink":"https://jsblog.fun/2023/04/15/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/","excerpt":"博客网站建起来也过了十天半个月了，之前由于临毕业的各种事情，一直没给自己的博客站做美化 今天来填一下这个自己留的美化坑。 持续更新中...","text":"博客网站建起来也过了十天半个月了，之前由于临毕业的各种事情，一直没给自己的博客站做美化 今天来填一下这个自己留的美化坑。 持续更新中... 本文参考自next主题中文文档 Next目录1234567891011121314151617181920212223242526272829303132333435363738├── .github #github信息├── languages #多语言| ├── _en.yml #默认语言| └── zh-CN.yml #简体中文| └── zh-TW.yml #繁体中文├── layout #布局，根目录下的*.swig文件是对主页，分页，存档等的控制| ├── _custom #可以自定义的模板，覆盖原有模板| | ├── head.swig #文首样式| | ├── header.swig #头部样式| | ├── sidebar.swig #侧边栏样式| ├── _macro #可以自定义的模板，覆盖原有模板| | ├── post.swig #文章模板| | ├── reward.swig #打赏模板| | ├── sidebar.swig #侧边栏模板| ├── _partial #局部的布局| | ├── head #头部模板| | ├── search #搜索模板| | ├── share #分享模板| ├── _script #局部的布局| ├── _third-party #第三方模板| ├── _layout.swig #主页面模板| ├── index.swig #主页面模板| ├── page #页面模板| └── tag.swig #tag模板├── scripts #script源码| ├── tags #tags的script源码| ├── marge.js #页面模板├── source #源码| ├── css #css源码| | ├── _common #*.styl基础css| | ├── _custom #*.styl自定义局部css| | └── _mixins #mixins的css| ├── fonts #字体| ├── images #图片| ├── js #javascript源代码| └── lib #引用库├── _config.yml #主题配置文件└── README.md #说明文件 转载自Bill Yang’s Blog 开始美化现在我的博客首页是我的所有文章的全部内容，未免有些太冗余了，想简单调整一下，改成缩略图或网站介绍什么的。 下面开始尝试来解决这件事: 文章摘要这个过程的实现很简单，在想要发布的文章里正文前输入以下内容： 1&lt;!--more--&gt; 即可实现只显示文章摘要，但是不是很好看： 统计文章数目next主题文件的_config.yml 123456# Enable / Disable menu icons / item badges.menu_settings: icons: true badges: false -&gt; true resources: download 修改好后： 搜索栏12$ cd D:\\blog$ npm install hexo-generator-searchdb --save 进入config.yml 1234567891011# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-next#添加以下内容# Searchsearch: path: search.xml field: post format: html limit: 10000 进入next 12345678910111213# Local Search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 然后再部署上传： 123$ hexo clean$ hexo g$ hexo d 配置好之后，是长这个样子的： 在这一步中我出现了以下错误： 尝试去解决一下： 按F12去network找了，并没有出现错误。 等一会发现好了，可能是github需要一段时间来反应… 修改tag样式进入/themes/next/layout/_macro/post.swig 修改如下内容 rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125;转换为&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 12&#123;%- for tag in post.tags.toArray() %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; 看看长什么样子： 不蒜子统计进入\\themes\\hexo-theme-next\\_config.yml 12345678busuanzi_count: enable: true total_visitors: true total_visitors_icon: fa fa-user total_views: true total_views_icon: fa fa-eye post_views: true post_views_icon: fa fa-eye 来必力评论系统进入来必力，先注册账号（注册不需要魔法，但是登录需要魔法） 登录账号后，选择安装 点击现在安装，然后输入域名和网站名称后进入到代码安装界面： 复制其中的uid双引号里的内容： 编辑主题配置文件_config.yml 1livere_uid: #your livere_uid 安装完成后，长这样子： 评论系统构建完成！ 要是想让有论评时邮件通知，进入个人管理界面： 这样即可设置评论提醒。 设置代码高亮主题进入主题配置文件 123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: normal # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: mac 其效果如下： 站点建立时间在主题配置文件修改since字段： 123footer: # Specify the date when the site was setup. If not defined, current year will be used. since: 2023-03 看看长什么样子： 添加字数统计和阅读时间在hexo配置界面 1npm install hexo-symbols-count-time --save 在hexo设置文件中添加字段 123456#字数和阅读时长统计symbols_count_time: symbols: true time: true total_symbols: true total_time: true 然后进入主题config文件： 123456symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 看看长什么样子： 删除hexo&amp;next强力驱动删除themes\\hexo-theme-next\\layout\\_partials目录下footer.swig里的以下内容： 123456789&#123;%- if theme.footer.powered %&#125; &lt;div class=&quot;powered-by&quot;&gt; &#123;%- set next_site = &#x27;https://theme-next.org&#x27; %&#125; &#123;%- if theme.scheme !== &#x27;Gemini&#x27; %&#125; &#123;%- set next_site = &#x27;https://&#x27; + theme.scheme | lower + &#x27;.theme-next.org&#x27; %&#125; &#123;%- endif %&#125; &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;, &#123;class: &#x27;theme-link&#x27;&#125;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme, &#123;class: &#x27;theme-link&#x27;&#125;)) &#125;&#125; &lt;/div&gt;&#123;%- endif %&#125; 看看长什么样子： 主页文章的阴影效果进入themes\\next\\source\\css\\_common\\components\\post\\post.styl改变post-block代码 123456.use-motion &#123; if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123; .post-block, .pagination, .comments &#123; opacity: 0; &#125; &#125; 变成 1234567891011121314.use-motion &#123; if (hexo-config(&#x27;motion.transition.post_block&#x27;)) &#123; .post-block&#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; background:rgba(255,255,255,0.9) none repeat scroll !important; //添加透明效果 -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; .pagination, .comments &#123; opacity: 0; &#125; &#125; 长这个样子： 不好看，弃用了。 添加顶部加载条先进入next主题内： 123$ cd themes/next$ ls_config.yml crowdin.yml docs gulpfile.js languages layout LICENSE.md package.json README.md scripts source 把这个开源程序安装到lib文件夹 1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 然后安装这个程序，进入_config.yml，把false改成true 123456pace: enable: true # Themes list: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: minimal 长这个样子： 注意，这个是页面加载的进度条，不是阅读进度的进度条。 圆角边框D:\\blog\\themes\\hexo-theme-next\\source\\css\\_variables中的Pisces.styl和Gemini.styl 12$border-radius-inner = 20px;$border-radius = 20px; 长这个样子: 回到顶部按钮显示百分比修改themes\\next\\_config.yml 1234567back2top: # 回到顶部按钮 enable: true # true，按钮显示在侧边栏；false，按钮显示在右下角 sidebar: true # 按钮上显示百分比 scrollpercent: true 长这个样子： 阅读进度加载条修改themes\\next\\_config.yml中的： 1234567# Reading progress barreading_progress: enable: true # Available values: top | bottom position: bottom color: &quot;#37c6c0&quot; height: 3px 长这个样子： 安装标签云package.json 1234567891011121314151617 &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^6.3.0&quot;, &quot;hexo-deployer-git&quot;: &quot;^4.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^2.0.0&quot;, &quot;hexo-generator-category&quot;: &quot;^2.0.0&quot;, &quot;hexo-generator-index&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-searchdb&quot;: &quot;^1.4.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^2.0.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^2.0.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^6.0.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^2.1.0&quot;, &quot;hexo-server&quot;: &quot;^3.0.0&quot;, &quot;hexo-symbols-count-time&quot;: &quot;^0.7.1&quot;, &quot;hexo-theme-landscape&quot;: &quot;^0.0.3&quot;, &quot;hexo-tag-cloud&quot;: &quot;2.0.*&quot; &#125;&#125; 然后进入hexo主文件： 1npm install hexo-tag-cloud@^2.0.* --save 然后进入theme/next/layout/_macro/sidebar.swig 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;widget-wrap&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;标签云&lt;/h3&gt; &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt; &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 长这个样子： 在根目录的config中添加以下内容 1234567# hexo-tag-cloudtag_cloud: textFont: Trebuchet MS, Helvetica textColor: &#x27;#333&#x27; textHeight: 25 outlineColor: &#x27;#E2E1D1&#x27; maxSpeed: 0.1 就会长这个样子： 增加文章结束标志/themes/next/layout/_macro中新建passage-end-tag.swig 输入： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;-------------End-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 然后进入/themes/next/layout/_macro/post.swig在post-footer前添加代码： 12345&#123;% if not is_index and theme.passage_end_tag.enabled %&#125; &lt;div&gt; &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125; &lt;/div&gt;&#123;% endif %&#125; 然后打开/themes/next/_config.yml 123# End tagpassage_end_tag: enabled: true 站点地图通用站点地图github地址 进入根目录 1npm install hexo-generator-sitemap --save 安装好后进入根目录下的_config.yml 123# 通用站点地图sitemap: path: sitemap.xml 百度github 进入根目录 1npm install hexo-generator-baidu-sitemap --save 进入_config.yml 123# 百度站点地图baidusitemap: path: baidusitemap.xml Hexo 百度主动推送（未完成）Github 博客页面透明化、修改背景图片进入themes\\next下的_config.yml，取消注释style 1234567891011custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig #postMeta: source/_data/post-meta.swig postBodyEnd: source/_data/post-body-end.swig #footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl style: source/_data/styles.styl 在\\blog\\source\\_data下新建style.styl 输入如下内容： 123456789101112131415#.content-wrap &#123; opacity: 0.9;&#125;.sidebar &#123; background-color: transparent; opacity: 0.9;&#125;.header-inner &#123; background: rgba(255,255,255,0.9);&#125; 继续修改上一步的style.styl 添加以下内容： 1234567//背景图片设置body &#123; background-image: url(/images/background.jpg); background-repeat: no-repeat; background-attachment: fixed; background-size: 100% 100%;&#125; 修改好后长这样： 修改侧边栏颜色在blog\\source\\\\_data\\style.styl中添加以下字段： 1234//侧边栏颜色.site-brand-container &#123; background: #87CEFA;&#125; 长这个样子： 修改文章之间的分割线仅仅针对Pices主题 \\themes\\next\\source\\css\\_common\\components\\post\\post-eof.styl 1234567891011.post-eof &#123; background: $grey-light; height: 1px; margin: $post-eof-margin-top auto $post-eof-margin-bottom; text-align: center; width: 8%; .post-block:last-of-type &amp; &#123; display: none; &#125;&#125; 更改中英文字体转自字体设置 更改英文字体为Times New Roman，进入theme\\next\\_config.yml 1234567891011# Font options:# `external: true` will load this font family from `host` above.# `family: Times New Roman`. Without any quotes.# `size: x.x`. Use `em` as unit. Default: 1 (16px)# Global font settings used for all elements inside &lt;body&gt;.global: external: true family: Times New Roman size: 更改中文为思源宋体（Noto Serif SC） 修改/source/css/_variables/base.styl 123// Font families.// $font-family-chinese = &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;;$font-family-chinese = &quot;Noto Serif SC&quot; 修改/layout/partials/head/head.njk，在next_font添加 123456&#123;&#123; next_font() &#125;&#125;&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; theme.vendors.fontawesome &#125;&#125;&quot;&gt;### 添加&lt;link href=&quot;https://fonts.googleapis.com/css?family=Noto+Serif+SC|Roboto&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; 设置完后的效果： 彩带子123$ cd themes/next$ ls_config.yml crowdin.yml docs gulpfile.js languages layout LICENSE.md package.json README.md scripts source 然后 安装这个到 source/lib： 1$ git clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas-ribbon 在next主题下的 _config.yml 文件中修改： 12canvas_ribbon: enable: true 长这个样子（就是这个彩带，刷新一次变一次）： 增加点击特效转自这位大佬和这位 下载 JavaScript 脚本（这里），放在主题文件夹下 themes\\next\\source\\js\\cursor\\ 下，如果没有 cursor 这个目录，手动创建一下。 再创建一个js脚本，命名为cherry.js，内容是： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101(function cherry() &#123; var possibleColors = [&quot;#D61C59&quot;, &quot;#E7D84B&quot;, &quot;#1B8798&quot;] var width = window.innerWidth; var height = window.innerHeight; var cursor = &#123;x: width/2, y: width/2&#125;; var particles = []; function init() &#123; bindEvents(); loop(); &#125; // Bind events that are needed function bindEvents() &#123; document.addEventListener(&#x27;mousemove&#x27;, onMouseMove); document.addEventListener(&#x27;touchmove&#x27;, onTouchMove); document.addEventListener(&#x27;touchstart&#x27;, onTouchMove); window.addEventListener(&#x27;resize&#x27;, onWindowResize); &#125; function onWindowResize(e) &#123; width = window.innerWidth; height = window.innerHeight; &#125; function onTouchMove(e) &#123; if( e.touches.length &gt; 0 ) &#123; for( var i = 0; i &lt; e.touches.length; i++ ) &#123; addParticle( e.touches[i].clientX, e.touches[i].clientY, possibleColors[Math.floor(Math.random()*possibleColors.length)]); &#125; &#125; &#125; function onMouseMove(e) &#123; cursor.x = e.clientX; cursor.y = e.clientY; addParticle( cursor.x, cursor.y, possibleColors[Math.floor(Math.random()*possibleColors.length)]); &#125; function addParticle(x, y, color) &#123; var particle = new Particle(); particle.init(x, y, color); particles.push(particle); &#125; function updateParticles() &#123; for( var i = 0; i &lt; particles.length; i++ ) &#123; particles[i].update(); &#125; for( var i = particles.length -1; i &gt;= 0; i-- ) &#123; if( particles[i].lifeSpan &lt; 0 ) &#123; particles[i].die(); particles.splice(i, 1); &#125; &#125; &#125; function loop() &#123; requestAnimationFrame(loop); updateParticles(); &#125; function Particle() &#123; this.character = &quot;*&quot;; this.lifeSpan = 120; //ms this.initialStyles =&#123; &quot;position&quot;: &quot;fixed&quot;, &quot;top&quot;: &quot;0&quot;, //必须加 &quot;display&quot;: &quot;block&quot;, &quot;pointerEvents&quot;: &quot;none&quot;, &quot;z-index&quot;: &quot;10000000&quot;, &quot;fontSize&quot;: &quot;20px&quot;, &quot;will-change&quot;: &quot;transform&quot; &#125;; this.init = function(x, y, color) &#123; this.velocity = &#123; x: (Math.random() &lt; 0.5 ? -1 : 1) * (Math.random() / 2), y: 1 &#125;; this.position = &#123;x: x - 10, y: y - 20&#125;; this.initialStyles.color = color; console.log(color); this.element = document.createElement(&#x27;span&#x27;); this.element.innerHTML = this.character; applyProperties(this.element, this.initialStyles); this.update(); document.body.appendChild(this.element); &#125;; this.update = function() &#123; this.position.x += this.velocity.x; this.position.y += this.velocity.y; this.lifeSpan--; this.element.style.transform = &quot;translate3d(&quot; + this.position.x + &quot;px,&quot; + this.position.y + &quot;px,0) scale(&quot; + (this.lifeSpan / 120) + &quot;)&quot;; &#125; this.die = function() &#123; this.element.parentNode.removeChild(this.element); &#125; &#125; function applyProperties( target, properties ) &#123; for( var key in properties ) &#123; target.style[ key ] = properties[ key ]; &#125; &#125; init();&#125;)(); 然后在主题自定义布局文件 themes\\next\\layout_custom\\custom.swig 中添加如下内容（不管是目录还是文件，没有就创建）： 123456&#123;# 鼠标点击特效 #&#125;&#123;% if theme.cursor_effect == &quot;fireworks&quot; %&#125; &lt;script async src=&quot;/js/cursor/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% elseif theme.cursor_effect == &quot;cherry&quot; %&#125; &lt;script src=&quot;/js/cursor/cherry.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; \\layout&#96;下找到_layout.swig，添加下面代码 1&#123;% include &#x27;_custom/custom.swig&#x27; %&#125; 然后在themes\\next\\\\_config.yml中添加下列内容： 1cursor_effect: cherry/fireworks 看看长什么样子 Cherry： fireworks： 点击特效，点击出现烟花 遇到的问题YAMLException今天hexo出现了这么个问题： 1YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line (x,x) 其实问题很简单，就是在这一坐标的位置少了一个空格，导致出错 123title: 我的第一篇博客date: 2023-03-19 15:17:54tags: 初到文章 #这里的tags后少加了一个空格，故出错 spawn failedHexo在我github的用户名更新后出现了一个问题 先出现这个问题，按HuangTLhit的帮助文档进行修改 1error：spawn failed 进行如下操作 123456#删除.deploy_git文件夹;$ git config --global core.autocrlf false#然后，依次执行：$ hexo clean$ hexo g$ hexo d 然后出现这个错误 1fatal: Could not read from remote repository 按BreenCL的帮助文档进行如下操作： 123ssh-keygen –t rsa –C &quot;git仓库邮箱&quot; #重新生成密钥git config --global user.name &quot;git用户名&quot; #重新配置本地用户名；git config --global user.email &quot;git登录邮箱&quot; #重新配置本地邮箱 之后将生成在C:\\Users\\用户名\\.ssh文件夹下的id_rsa.pub文件打开后复制到Git仓库设置—SSH配置—Key配置的地方粘贴即可， 就是在这里 然后把id_rsa.pub用记事本打开，然后复制到这里 再进行 123$ hexo clean$ hexo g$ hexo d 即正常进行发布。","categories":[{"name":"Blog","slug":"Blog","permalink":"https://jsblog.fun/categories/Blog/"}],"tags":[{"name":"博客美化","slug":"博客美化","permalink":"https://jsblog.fun/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"},{"name":"Hexo","slug":"Hexo","permalink":"https://jsblog.fun/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://jsblog.fun/tags/Next/"}]},{"title":"基于Github的个人博客网站使用https协议","slug":"Github博客-使用https协议","date":"2023-04-14T09:00:00.000Z","updated":"2023-04-16T12:10:07.295Z","comments":true,"path":"2023/04/14/Github博客-使用https协议/","link":"","permalink":"https://jsblog.fun/2023/04/14/Github%E5%8D%9A%E5%AE%A2-%E4%BD%BF%E7%94%A8https%E5%8D%8F%E8%AE%AE/","excerpt":"在访问自己的网站时，网页经常提示http连接不安全。 今天就通过设置，将http协议改为https，去除连接不安全。","text":"在访问自己的网站时，网页经常提示http连接不安全。 今天就通过设置，将http协议改为https，去除连接不安全。 第一步：Github开启enforce https从Github开启https非常简单 找到自己的仓库： 进入仓库项目的Settings-&gt;Github pages： 往下滑滑滑 我是直接开启就可以，看到有人说这个按钮是灰色的，如是灰色的解决方法： 那么如果如果之前已经开启了自定义域名， enforce HTTPS 无法勾选且怎么办？ 按照官方提示，进行如下操作： 把 Custom domain 中的值清空，并点击 Save 进行保存； 在 Custom domain 中的填入之前清空的值，我这里是 likfe.com ，填入后点击保存； 尝试在浏览器里主动访问 域名，地址要根据自己的情况，注意协议类型是 https，正确情况下是能正常访问的； 刷新项目设置页，如果 enforce HTTPS 可勾选，勾选即可； 如果 enforce HTTPS 不可勾选，并且提示 Not yet available for your site because the certificate has not finished being issued” ，说明证书尚未申请完成，等待一天即可。 转载自他叫自己MR.张 出现http和https混合内容这样设置完成后，我出现了 xed Content: The page at &#39;&lt;URL&gt;&#39; was loaded over HTTPS, but requested an insecure element &#39;&lt;URL&gt;&#39;. .... 这个错误原因是因为我们访问域名用的是https流量，但是引用图片资源却是用的http流量，这会导致图片无法查看。 于是我们需要去给我们的静态资源配置https证书，由于我的图片是存在七牛云的图床中，所以我进入七牛云配置一下自己的图床。 第二步：配置https证书进入七牛云证书管理，去申请ssl证书 DV单域名证书是免费的，所以我们购买这个证书： 核对信息并支付，一定要是0元哈。 下面我们对信息进行补全： 公司信息可以瞎填一下，毕竟我们是个人，只要填满了申请CA证书就可以了。 补充好了之后，我们就可以配置DNS信息了： 在自己的控制台，我是腾讯云，按照要求的解析配置： 解析好后，域名验证一下，验证好了后等待CA机构审核，审核好后就自动配置好证书了，也可以在域名管理中修改： 我们还可以在域名管理设置一下防盗链白名单，防止其他人盗走我们的图片： 好了，现在访问自己的网址，可以发现有一把小锁了：","categories":[{"name":"Blog","slug":"Blog","permalink":"https://jsblog.fun/categories/Blog/"}],"tags":[{"name":"博客小站","slug":"博客小站","permalink":"https://jsblog.fun/tags/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%AB%99/"}]},{"title":"实现阿里云盘实时同步本地文件","slug":"实现阿里云盘同步本地文件","date":"2023-04-14T08:00:00.000Z","updated":"2023-04-16T12:15:52.571Z","comments":true,"path":"2023/04/14/实现阿里云盘同步本地文件/","link":"","permalink":"https://jsblog.fun/2023/04/14/%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E5%90%8C%E6%AD%A5%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/","excerpt":"一个阿里云盘同步备份文件的免费好方法","text":"一个阿里云盘同步备份文件的免费好方法 背景最近在找本地文件的实时同步工具，想通过实时同步我的博客内容来保证博客内容实时有备份. 然而试过了坚果云（纯纯流氓软件）、百度网盘、夸克网盘、OneDrive来同步本地本地文件，都觉得不是很好用 坚果云：坚果云真的太流氓了，注册表和右键菜单永远卸载不干净，同步速度又慢，最后折腾了半天使用GEEK来卸载干净。 百度网盘：上传速度慢，会员贵，我贫穷。 夸克网盘：又限速，空间又小，不开会员非常难用，并且文件还容易丢。 OneDrive：在国内限速！几乎不怎么动！本来很好用的，可惜是在国内。世纪互联的国内OneDrive据说很快，但是要付费。 阿里云盘：主打不限速，但是同步备份功能要超级会员。我正好用学生认证拿到了1T空间，想着能不能用这个做点同步功能。 同步备份功能的实现在Github发现一个非常好用的阿里云盘工具 在这里下载windows X64的版本，然后解压即可使用，无需安装。 开始使用aliyunpan双击解压之后的客户端： 进入命令行界面： 登录进行登录需要用到refresh token 需要进入到网盘网页版获取： 复制token之后，在aliyunpan客户端中输入 1234567891011121314#登录aliyunpan&gt;/ login#输入refresh token后即登录成功#查看一下有什么文件和工作目录aliyunpan&gt;/ unknown$ lsaliyunpan&gt;/ unknown$ pwd#和网盘里的一样即可#列出当前账号aliyunpan&gt;/ unknown$ loglist#获取当前账号aliyunpan&gt;/ unknown$ who 查验后确认是自己的账户之后先设置自动更新token： 1aliyunpan&gt;/ unknown$ token update 同步备份这些都设置完成后，启动官方的sync同步备份功能： 123456#使用命令行配置启动同步备份服务，将本地目录 D:\\tickstep\\Documents\\设计文档 中的文件备份上传到云盘目录 /sync_drive/我的文档#文件夹内容少时可直接上传aliyunpan&gt;/ unknown$ sync start -ldir &quot;D:\\tickstep\\Documents\\设计文档&quot; -pdir &quot;/sync_drive/我的文档&quot; -mode &quot;upload&quot;#文件夹内容多则可以先扫描再上传aliyunpan&gt;/ unknown$ sync start -ldir &quot;D:\\tickstep\\Documents\\设计文档&quot; -pdir &quot;/sync_drive/我的文档&quot; -mode &quot;upload&quot; -step scanaliyunpan&gt;/ unknown$ sync start -ldir &quot;D:\\tickstep\\Documents\\设计文档&quot; -pdir &quot;/sync_drive/我的文档&quot; -mode &quot;upload&quot; 等待命令运行后就可以发现云盘中确实是完成了自动备份 自动备份功能需要一直运行云盘工具 所以感觉运行在Linux服务器中就比较完美了。 碎碎念突然一想，我的博客是依靠于Github建立。 我每次hexo -d将博客推送到我的Github账户上后，Github里我的项目就直接有一份备份了！ 我既然用的是windows个人系统，不能长时间开着我的电脑。 而且Github中也一直有备份，那我一直想自动同步到阿里云盘，这有啥意义呢？ 不管如何，这肯定是一个同步备份文件的免费好方法了，就这样吧！","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://jsblog.fun/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"},{"name":"Github","slug":"Github","permalink":"https://jsblog.fun/tags/Github/"}]},{"title":"创建免费企业邮箱和使用Claude-in-slack","slug":"创建企业免费邮箱并使用Claude-in-Slack","date":"2023-04-13T07:44:00.000Z","updated":"2023-04-16T12:14:16.967Z","comments":true,"path":"2023/04/13/创建企业免费邮箱并使用Claude-in-Slack/","link":"","permalink":"https://jsblog.fun/2023/04/13/%E5%88%9B%E5%BB%BA%E4%BC%81%E4%B8%9A%E5%85%8D%E8%B4%B9%E9%82%AE%E7%AE%B1%E5%B9%B6%E4%BD%BF%E7%94%A8Claude-in-Slack/","excerpt":"创建免费企业邮箱并使用由openai团队出走核心成员创建的claude","text":"创建免费企业邮箱并使用由openai团队出走核心成员创建的claude 创建免费企业邮箱注册邮箱进入网易免费企业邮箱，注册邮箱，输入手机号，发送验证码 然后设置管理员账号、密码以及域名等（可选有域名和无域名） 然后登录邮箱，进入邮箱管理界面： DNS解析和更换域名选择组织机构管理的域名管理，新增域名（如果注册的时候填域名了是有填入的域名的）： 点击这个域名，按照它的要求进行DNS解析： 第三步如果设置立即生效后会重新登录，此时登录名变成了： username@domain.com 重新登录管理员账户，进入到这一步，开始进行第四步部署。 点击查看设置方法后，选择各项要求，我这里用的是腾讯云，所以选择了其他域名注册商: 按照这样提交之后会显示如何进行DNS解析： 按照其要求，在注册商的解析平台添加DNS解析，比如说： 添加MX记录： XXX.com 优先级 5 XXXX.XXXX.com. 就需要在解析控制台添加（由于XXX.com是根域名，所以我们添加@代表根域名）： 以此类推，按照网易DNS的需求，添加DNS解析即可。 进入邮箱设置完成后，即可进入到网易云邮箱以用户身份登录，注册成功： 这样设置后，可以发给自己的个人邮箱试试收发功能是否能使用，一般配置正确的话都是没问题的。 使用Claude-in-Slack进入ANTHROPIC的官网，选择Claude-in-slack，Add to Slack 然后创建一个新的工作区： 输入刚刚创建的企业邮箱： 输入发送的验证码-&gt;输入名称-&gt;输入频道名 进入频道，选择浏览： 点击应用： 搜索Claude，然后将其添加到自己的工作区中，在工作区的应用栏即可找到： 第一次使用时会让你同意它的政策，点击Agree即可，下面就可以开始正式的对话了： 享受Claude吧！据说该模型是Openai的核心成员出走后创建的新公司的模型。 申请Claude既然已经创建了企业邮箱，拿都拿到了，本来Claude就要求企业邮箱，当然要拿来申请一下Claude试试了，万一通过了呢 进入Claude申请界面： 然后按照它的问题填写信息，填写的越多通过概率越高（大概，至少我目前还没通过） 都填完之后，最后Submit即可！","categories":[{"name":"Ai","slug":"Ai","permalink":"https://jsblog.fun/categories/Ai/"}],"tags":[{"name":"Claude","slug":"Claude","permalink":"https://jsblog.fun/tags/Claude/"},{"name":"企业邮箱","slug":"企业邮箱","permalink":"https://jsblog.fun/tags/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/"}]},{"title":"Windows server+v2ray+tls+wb+nginx代理服务器搭建","slug":"windows server+TLS+websocket+nginx","date":"2023-04-09T12:00:00.000Z","updated":"2023-04-16T12:13:03.111Z","comments":true,"path":"2023/04/09/windows server+TLS+websocket+nginx/","link":"","permalink":"https://jsblog.fun/2023/04/09/windows%20server+TLS+websocket+nginx/","excerpt":"使用windows server 2012 完成v2ray+tls+wb+nginx的搭建","text":"使用windows server 2012 完成v2ray+tls+wb+nginx的搭建 Windows server+v2ray+tls+wb+nginx下面尝试一下用windows server套tls和nginx反向代理，其实很简单，如果Linux的学会了之后windows图形界面就很简单了。 这个是我之前用Linux构建流程，整篇博客内容均来自不良林，更详细的步骤可以看不良林的视频。 下面正式开始： 环境准备 一个解析好的域名，指向自己的windows服务器，国内国外都可以。 win-amch：用于windows创建证书,直接download下载就可以。 Nginx：web server，用于创建网页，选择stable version下载。 一台windows server服务器 域名解析进入购买域名的商家控制台，我这里用的是腾讯云： 在控制台中加入两条A记录，指向自己的服务器IP，完成解析。 解析完成后可以在cmd命令行中ping一下自己的域名，看看主机地址是不是自己指向的： 有没有回复无所谓，只需要证明A记录生效了就可以。 开启网站端口因为搭建一个网站需要用到服务器的80和443端口，所以我们在正式部署之前先开放一下这两个端口。 我windws服务器所使用的系统是windows server 2012，通过server manager开放端口。 添加进站规则： 然后选择port: 输入端口： 然后下一步下一步，输入这项规则的名称，其余保持默认就可以了，设置完成之后可以发现它已经在进展规则里了： 然后我们可以进行下一步了。 注册ECC证书以下内容参考自不良林的视频： 对于TLS来说，证书是必不可少的。 我们使用win-acme来注册证书，从网站下载后，解压，打开wacs： 然后按照以下步骤注册证书： 选择M，表示使用完全选项。 然后Enter，按默认的走。 这里输入你的域名，然后Enter确认一次。 这里选择1，表示http证书 这里输入网站的根地址，就是Nginx储存html的地址 我的地址是这样的C:\\Users\\XXX\\Desktop\\nginx-1.22.1\\nginx-1.22.1\\html 然后Enter使用默认配置 密钥的类型这里我们选择1：ECCkey 证书的格式我们选择2：Nginx配置所用的 密钥文件保存在哪里，我们选择在V2ray的目录：C:\\Users\\XXX\\Desktop\\v2ray-windows-64 私钥的密码，我们选择1，不设置密码。 剩下的就全部Enter选择默认就可以了。 验证通过（valid）后即可在保存的路径找到pem文件，我们只需要保存以下两个，剩下的删掉就可以： 配置V2ray和Nginx 以下配置文件均从不良林处copy过来 Nginx的使用方法： 双击即可启动，要想修改配置文件，就找到Nginx主目录下的&#x2F;conf&#x2F;nginx.conf中进行修改。 先启动Nginx，在浏览器地址栏输入自己的IP，应该能看到Nginx的欢迎界面： 然后修改V2ray的配置文件：&#x2F;v2ray-windows-64&#x2F;config.json 1234567891011121314151617181920212223242526272829&#123; &quot;inbounds&quot;: [ &#123; &quot;port&quot;: 8388, #准备开放的端口 &quot;listen&quot;:&quot;127.0.0.1&quot;, &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;c98ee1c3-5ea3-4fbf-a458-4c8393149f2a&quot;, #自己生成的id &quot;alterId&quot;: 0 &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, #修改协议为ws &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;/ray&quot; #配置的路径 &#125; &#125; &#125; ], &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123;&#125; &#125; ]&#125; 修改Nginx：&#x2F;Nginx&#x2F;conf&#x2F;nginx.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; server &#123; listen 443 ssl http2; server_name win.buliang0.tk; #你的域名 ssl_certificate C:\\\\Users\\\\Administrator\\\\Desktop\\\\v2ray-windows-64\\\\cer.pem; #证书 ssl_certificate_key C:\\\\Users\\\\Administrator\\\\Desktop\\\\v2ray-windows-64\\\\key.pem; #私钥 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_prefer_server_ciphers off; location / &#123; proxy_pass https://www.bing.com; #伪装网址 proxy_ssl_server_name on; proxy_redirect off; sub_filter_once off; sub_filter &quot;www.bing.com&quot; $server_name; proxy_set_header Host &quot;www.bing.com&quot;; proxy_set_header Referer $http_referer; proxy_set_header X-Real-IP $remote_addr; proxy_set_header User-Agent $http_user_agent; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; proxy_set_header Accept-Encoding &quot;&quot;; proxy_set_header Accept-Language &quot;zh-CN&quot;; &#125; location /ray &#123; proxy_redirect off; proxy_pass http://127.0.0.1:8388; #v2ray监听端口 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; &#125; server &#123; listen 80; location /.well-known/ &#123; root html; &#125; location / &#123; rewrite ^(.*)$ https://$host$1 permanent; &#125; &#125;&#125; 修改好后，重新启动Nginx和V2ray 12#V2ray 先关闭原来的黑窗口命令行，将V2ray主程序拖进cmd，自动显示这个程序$ V2ray.exe run 12#Nginx找到主目录，将Nginx主程序拖进cmd$ nginx.exe -s reload 然后在V2rayN主程序中设置一下： 配置好后，Tcpping一下能通后，进行真连接延迟测试，都能通过的话即可正常使用代理服务器！ 最后老样子，测试一下服务器的安全性：Qualys SSL Labs’s SSL Server Test 测试结果为A+，情理之中！","categories":[{"name":"Virtual Machine","slug":"Virtual-Machine","permalink":"https://jsblog.fun/categories/Virtual-Machine/"}],"tags":[{"name":"VPS","slug":"VPS","permalink":"https://jsblog.fun/tags/VPS/"}]},{"title":"V2ray+tls+websocket+cdn代理服务器搭建","slug":"V2ray+TLS+websocket+cdn代理服务器搭建","date":"2023-04-08T10:14:00.000Z","updated":"2023-04-16T12:12:25.466Z","comments":true,"path":"2023/04/08/V2ray+TLS+websocket+cdn代理服务器搭建/","link":"","permalink":"https://jsblog.fun/2023/04/08/V2ray+TLS+websocket+cdn%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/","excerpt":"最近有了自己的云服务器（Azure微软云，我的部署过程请看之前的博客），所以想着借助于代理隐藏自己的IP，又怕自己的服务器IP被墙了，所以尝试搭建一个安全系数比较高的代理服务器。 我所采用的是V2ray+TLS+websocket+cdn加速的策略。cdn是为了在最严格的阶段，或者说自己的IP已经被墙了的阶段让它可用。日常不准备使用CDN加速。","text":"最近有了自己的云服务器（Azure微软云，我的部署过程请看之前的博客），所以想着借助于代理隐藏自己的IP，又怕自己的服务器IP被墙了，所以尝试搭建一个安全系数比较高的代理服务器。 我所采用的是V2ray+TLS+websocket+cdn加速的策略。cdn是为了在最严格的阶段，或者说自己的IP已经被墙了的阶段让它可用。日常不准备使用CDN加速。 V2ray安装V2ray安装我使用的是223boy的一键脚本，我个人觉得非常好用。 安装方式：（需要使用root用户哦） 12$ apt-get update -y &amp;&amp; apt-get install wget -y &amp;&amp; apt-get install curl -y #安装一下必要的依赖$ bash &lt;(curl -s -L https://git.io/v2ray.sh) #安装主程序 开始安装下来一路默认回车就可以，这样是最简单的代理服务器设置，默认之后会输出端口和其他信息，记住这个端口。 12#打开防火墙，这是Linux系统防火墙，一般默认是除了必要端口全关闭的。$ iptables -I INPUT -p tcp --dport &lt;port&gt; -j ACCEPT 如果比较严格的虚拟机厂商，比如Azure，我们是需要在虚拟机控制台再打开对应端口的。需要两者配合。 此时输入 1$ v2ray url 复制出来的连接地址，导入到V2rayN (我在PC上使用，系统是Wndwos，这是一个很方便的节点管理软件)就可以直接使用代理服务了，比较简单方面。 选择从剪贴板导入即可 将此服务器设置为活动服务器，然后路由选择绕过大陆，将系统代理改为自动配置代理就可以顺利代理啦！ 这样设置就和PAC模式一样，仅在需要的时候使用代理。如果想要使用全局，就将路由选为全局。 V2ray+tls+websocket+cdn以上是基础的V2ray配置，能代理上网，安全性一般，如果不经常使用也够用了。 我感觉自己用的比较多，我就升级了一下。下面就是V2ray+TLS+websocket+cdn的配置过程： 官方有一个教程，省去了较多步骤，如果很熟练的话可以跟这个教程来进行。 我还看了一个较详细的教程，根据这两个进行了自己的代理服务器搭建。 部署的环境域名购买：Namecheap CDN: Cloudflare web server：Nginx 系统：Ubuntu TLS的设置 TLS 中文译名是传输层安全，以下是v2ray教程里给出的两个介绍的比较好的文章： SSL&#x2F;TLS协议运行机制的概述 传输层安全协议 首先我进行了一个V2ray+TLS的部署，TLS流量的设置需要有证书，而证书需要现有一个域名。 域名购买以及解析我是从Namecheap购买的域名，使用学生认证免费获得了一年的使用权。 缺点就是只能使用.me的，只需要搜索域名然后绑定github就可以了。 购买好域名后，我们将其绑定到Cloudflare中： 注册账号后登录，在主页中添加站点： 然后选择免费计划，个人用户一般就够用： 然后配置DNS： 上面的名称指的是域名名称。不开代理是为了设置证书。 然后在Namecheap中更改dns服务器，这样配置后就成功了。 等待几分钟后，配置就会成功。 下面记录一下自己的API key，一会要用： 选择Global API key，输入密码后可以查看，复制下来，一定要慎重保存！不要泄露! 申请配置好之后，还要再把SSL&#x2F;TLS加密模式设为完全模式，端到端加密，使用服务器上的自签名证书。 这一步配置好后再来确认一次哦！ 注册TLS证书 这里是V2ray官方提供的教程介绍： TLS 是证书认证机制，所以使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 Let’s Encrypt。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 acme.sh 脚本生成，本部分说明部分内容参考于acme.sh README。 证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。 而证书的生成需要用到一个包:acme 下面我们在服务器上进行操作和注册： 12345$ curl https://get.acme.sh | sh#安装默认安装到 ~/.acme.sh目录下$ source ~/.bashrc#如果安装报错了，可能需要安装一下socat$ sudo apt-get -y install netcat 我下面是根据这两个说明来进行的 acme使用ZeroSSL的CA证书 123456789101112# 用邮箱注册zerossl账号$ acme.sh --register-account -m EMAIL@example.com --server zerossl# 设置Cloudflare的API Key（上一步得到的）$ export CF_Key=&quot;ccxxxxxxxxxxxxxxxxxxxb&quot;#设置邮箱，填一个自己注册cloudflare的邮箱就可以了$ export CF_Email=&quot;xxxx@sss.com&quot;#生成证书，把YOURDOMAIN.COM替换为自己的域名$ acme.sh --server zerossl --issue -d YOURDOMAIN.COM --dns dns_cf$ sudo ~/.acme.sh/acme.sh --installcert -d MYDOMAIN --fullchainpath /etc/crt/autumn.crt --keypath /etc/crt/autumn.key#有时候这一步会报错说不允许用sudo，你可以切换到root再进行修改，不过~要换成你登录用户的家目录，如/home/user/.acme.sh/acme.sh --installcert -d MYDOMAIN --fullchainpath /etc/crt/autumn.crt --keypath /etc/crt/autumn.key#安装tls证书$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc 附上手动更新证书的命令，acme每60天会自动更新证书 1234#ecc证书$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc#rsa证书$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force 注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册 V2ray+tls到这一步就可以配置成V2ray+TLS的配置了，如果不想继续设置Nginx了，可以按如下配置设置。 V2ray服务端配置： 1$ vim /etc/v2ray/config.json 123456789101112131415161718192021222324252627282930&#123; &quot;inbound&quot;: &#123; &quot;port&quot;: 443, // 建议使用 443 端口 &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;23ad6b10-8d1a-40f7-8ad0-e3e35cd38297&quot;, #你自己设置的id，可以选默认或生成 &quot;alterId&quot;: 64/0 #我尝试了 用0也可以 &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot;, &quot;security&quot;: &quot;tls&quot;, // security 要设置为 tls 才会启用 TLS &quot;tlsSettings&quot;: &#123; &quot;certificates&quot;: [ &#123; &quot;certificateFile&quot;: &quot;/etc/v2ray/v2ray.crt&quot;, // 证书文件 &quot;keyFile&quot;: &quot;/etc/v2ray/v2ray.key&quot; // 密钥文件 &#125; ] &#125; &#125; &#125;, &quot;outbound&quot;: &#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123;&#125; &#125;&#125; 修改好后重新启动V2ray 123$ v2ray #打开脚本$ 8$ 3 v2rayN客户端配置： 添加Vmess服务器 然后填写各项： 确定后测试一下tcp ping，能ping通后测试下真延迟，都有显示说明配置成功。 Websocket+Nginx配置下面需要在我们的服务器中添加Nginx web server，即开始搭建真正的网站了。 安装Nginx： 123#更新一下先$ sudo apt update$ sudo apt-install nginx 安装好后，可以配置自己的nginx了 1$ sudo vim /etc/nginx/nginx.conf 123456789101112131415161718192021222324events&#123;&#125;http&#123; error_log /etc/nginx/nginx-error.log error;server &#123; listen 443 ssl;# ssl on; 可写可不写，写上可能报错 ssl_certificate /etc/v2ray/v2ray.crt; ssl_certificate_key /etc/v2ray/v2ray.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; server_name jinreaserach.me; location /ray/ &#123; #你的代理地址，建议修改个复杂点的，“//”不能省 proxy_pass http://127.0.0.1:10000; #你准备开放的端口 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_redirect off; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125;&#125; 启动Nginx 12345$ systemctl start nginx#其实我经常这样用Nginx$ sudo nginx -s stop #关闭$ sudo nginx #开启，默认使用/etc/nginx/nginx.conf 配置好后，去修改一下V2ray的配置文件 1$ vim /etc/v2ray/config.json 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&#123; &quot;log&quot;: &#123; &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;, &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;, &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;inbounds&quot;: [ &#123; &quot;port&quot;: 10000, #自己设置的开放端口，与Nginx中配置一致 &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [ &#123; &quot;id&quot;: &quot;190feb67-87c7-411f-8dec-1c33aa629e51&quot;, #修改和客户端一样 &quot;level&quot;: 1, &quot;alterId&quot;: 0 #也与客户端一致 &#125; ] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;ws&quot;, #修改成ws，意为websocket &quot;wsSettings&quot;: &#123; &quot;path&quot;: &quot;/ray/&quot; #与Nginx配置文件中一致 &#125; &#125;, &quot;sniffing&quot;: &#123; &quot;enabled&quot;: true, &quot;destOverride&quot;: [ &quot;http&quot;, &quot;tls&quot; ] &#125; &#125; //include_ss //include_socks //include_mtproto //include_in_config // ], &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123; &quot;domainStrategy&quot;: &quot;UseIP&quot; &#125;, &quot;tag&quot;: &quot;direct&quot; &#125;, &#123; &quot;protocol&quot;: &quot;blackhole&quot;, &quot;settings&quot;: &#123;&#125;, &quot;tag&quot;: &quot;blocked&quot; &#125; //include_out_config // ], &quot;dns&quot;: &#123; &quot;servers&quot;: [ &quot;https+local://dns.google/dns-query&quot;, &quot;8.8.8.8&quot;, &quot;1.1.1.1&quot;, &quot;localhost&quot; ] &#125;, &quot;routing&quot;: &#123; &quot;domainStrategy&quot;: &quot;IPOnDemand&quot;, &quot;rules&quot;: [ &#123; &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [ &quot;geoip:private&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot; &#125; , &#123; &quot;type&quot;: &quot;field&quot;, &quot;domain&quot;: [ &quot;domain:epochtimes.com&quot;, &quot;domain:epochtimes.com.tw&quot;, &quot;domain:epochtimes.fr&quot;, &quot;domain:epochtimes.de&quot;, &quot;domain:epochtimes.jp&quot;, &quot;domain:epochtimes.ru&quot;, &quot;domain:epochtimes.co.il&quot;, &quot;domain:epochtimes.co.kr&quot;, &quot;domain:epochtimes-romania.com&quot;, &quot;domain:erabaru.net&quot;, &quot;domain:lagranepoca.com&quot;, &quot;domain:theepochtimes.com&quot;, &quot;domain:ntdtv.com&quot;, &quot;domain:ntd.tv&quot;, &quot;domain:ntdtv-dc.com&quot;, &quot;domain:ntdtv.com.tw&quot;, &quot;domain:minghui.org&quot;, &quot;domain:renminbao.com&quot;, &quot;domain:dafahao.com&quot;, &quot;domain:dongtaiwang.com&quot;, &quot;domain:falundafa.org&quot;, &quot;domain:wujieliulan.com&quot;, &quot;domain:ninecommentaries.com&quot;, &quot;domain:shenyun.com&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot; &#125; , &#123; &quot;type&quot;: &quot;field&quot;, &quot;protocol&quot;: [ &quot;bittorrent&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot; &#125; //include_ban_ad //include_rules // ] &#125;, &quot;transport&quot;: &#123; &quot;kcpSettings&quot;: &#123; &quot;uplinkCapacity&quot;: 100, &quot;downlinkCapacity&quot;: 100, &quot;congestion&quot;: true &#125; &#125;&#125; 修改好后重新启动v2ray 123$ v2ray #打开脚本$ 8$ 3 客户端配置如下： 先添加Vmess服务器 然后配置以下各项内容：（端口都是443） 都测试好后，测试一下Tcpping，能ping通后测试真连接延迟，能连接后即可。 此情况下域名也是能正常访问的，会显示如下画面: 设置的路径应该也是能加载出来的，不过会显示什么都没有，或者bad request. 到此为止，就全部配置成功了。 如果不放心，可以到Qualys SSL Labs’s SSL Server Test进行测试，测试结果应该可以到A（如果是V2ray+tls，应该会到B）： CDN加速V2ray+tls+websocket+nginx其实已经很安全了，但是如果这样子都被墙了，或者想加快访问速度（至少国内Cloudflare我测试是加速不了，如果域名备案了可以试试国内的），可以使用CDN加速，这里使用的是Cloudflare： 这下就可以防止IP被墙和加速访问（至少我是没有）啦！","categories":[{"name":"Virtual Machine","slug":"Virtual-Machine","permalink":"https://jsblog.fun/categories/Virtual-Machine/"}],"tags":[{"name":"VPS","slug":"VPS","permalink":"https://jsblog.fun/tags/VPS/"}]},{"title":"Azure微软云(Azure for students)虚拟机创建","slug":"Azure虚拟机构建指南","date":"2023-04-08T09:07:00.000Z","updated":"2023-04-16T12:09:54.944Z","comments":true,"path":"2023/04/08/Azure虚拟机构建指南/","link":"","permalink":"https://jsblog.fun/2023/04/08/Azure%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9E%84%E5%BB%BA%E6%8C%87%E5%8D%97/","excerpt":"使用Azure for students学生订阅创建虚拟机，避免踩坑。","text":"使用Azure for students学生订阅创建虚拟机，避免踩坑。 创建虚拟机这里有几个坑，血泪教训，请一定要注意，不注意就会扣免费的100刀 想看看自己的余额还有多少，可以进入Azure余额查询然后点击Usage，就可以看自己扣钱的是哪些方面， 首先，需要注意的是，如果从免费服务里创建两个虚拟机，地区会被限定，但是会提示免费750h： 点击创建后会显示这个 区域会显示只有两个可以选择，而且这两个据我观察是延迟比较高的地区。 想看看自己延迟最低的地区，可以利用这个Azure测速网站 延迟高的地区虚拟机不好用，所以我们选择自己创建延迟低地区的资源 创建虚拟机 第一个坑：修改可用性选项由于Azure的静态IP地址也要收费的，如果不修改可用性选项就只能使用静态IP，这个是要付费的。 Azure for students提供的是免费动态ip，所以我们要改成动态IP，而动态IP对可用性选项有要求。 我们选择无需基础结构冗余 选择这个选项后才能选择动态IP。 另外还有一点，就是大小必须选择B1s，不然也不会免费的。 然后填自己的管理员账户，登录方式等。 入站端口我选择的是SSH(22)，ssh是我最熟悉的登陆方式。 然后进行下一步，查看磁盘。 第二个坑，磁盘大小必须为64G进入磁盘选项后，一定要将磁盘重设为64GB，不然使用磁盘也会产生费用。 然后进入网络选项卡，新建IP 将IP设置为动态IP 点击确定，查看并创建虚拟机。 至此，虚拟机算是创建完了。 第三个坑，不要使用任何额外服务创建完成后，去所有资源选项卡看一下自己的所有资源，一定要把网络监视器给删除掉。这也是需要付费的，虽然价格不高。 这些ID一般是NetworkerWatcher_ID，进入到NetworkerWatcherRG资源组，选中，点击右上角的删除，删除网络监视器，拒绝付费。 注意！一定不要手欠开启任何提示的服务，不然就会开始付费！ 保持不动就不会付费。 登录登录就不用说了吧，我使用的是Xshell，所以只要新建窗口，输入Azure给的账号和密码就可以登陆了。（端口默认22） 使用root登录Azure虚拟机是禁用了root通过ssh密码登录的，所以我们要先给root设置个密码，通过ssh登录到创建的自己的账户后，再登录root。 123456#如何修改root密码并用root登录#登录到服务器后，试用如下命令修改root密码就可以登录啦$ sudo passwd root#修改密码为自己想要的密码$ su#输入密码后就切换为root用户了 设置免密码登录我使用的是Xshell，这样进行设置 新建用户密钥生成向导，然后基本上保持默认就可以了 然后下一步 然后输入密码（建议输入） 然后可以保存公钥或者保存为文件。 然后使用Xftp将其传输到服务器中，移动到~&#x2F;.ssh目录下 1234567$ mv id_rsa_2048.pub ~/.ssh/$ cd ~/.ssh$ cat id_rsa_2048.pub &gt;&gt;authorized_keys#.ssh和authorized_keys的权限要正确$ chmod 700 .ssh$ chmod 600 .ssh/authorized_keys#OK！ 下面通过Xshell使用密钥登录 选择Public Key 然后输入账号密码，点击确定 回去可以把密码删除，把password选项取消勾选，就只能通过密钥登录啦！ 另外，要记得把/etc/ssh/sshd_config下的 1PasswordAuthentication yes -&gt; no 然后重启ssh服务 1$ systemctl restart sshd.service 即可！下面就只能用密钥登录了。 设置登录端口仅自己的IP访问打开Azure网络管理面板，修改相关规则，设置为仅自己的IP地址。 设置成这样，保存就可以了，不要动其他的地方。 可以使用自己的虚拟机啦，每个月据传有15&#x2F;20G免费流量，多的要付费，对于个人来说，用上那个100刀的免费额度，每个月有75-80G左右，对我来说是够用了。","categories":[{"name":"Virtual Machine","slug":"Virtual-Machine","permalink":"https://jsblog.fun/categories/Virtual-Machine/"}],"tags":[{"name":"VPS","slug":"VPS","permalink":"https://jsblog.fun/tags/VPS/"}]},{"title":"Github学生认证记录","slug":"Github学生认证申请记录","date":"2023-04-02T09:00:00.000Z","updated":"2023-04-16T12:10:39.428Z","comments":true,"path":"2023/04/02/Github学生认证申请记录/","link":"","permalink":"https://jsblog.fun/2023/04/02/Github%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81%E7%94%B3%E8%AF%B7%E8%AE%B0%E5%BD%95/","excerpt":"最近github copliot很火爆，因为它编程的帮助功能很好用。 但是只能免费试用60天，而学生认证可以永久免费，我正好还是大学生，所以认证一下。 除此之外呢，github的学生包有很多福利，点击链接查看。 以下是个人申请的经历，总共申请了12次，成功。","text":"最近github copliot很火爆，因为它编程的帮助功能很好用。 但是只能免费试用60天，而学生认证可以永久免费，我正好还是大学生，所以认证一下。 除此之外呢，github的学生包有很多福利，点击链接查看。 以下是个人申请的经历，总共申请了12次，成功。 准备材料 转载自知乎用户Akari 教育邮箱（即学校发放的http://edu.cn后缀的邮箱）（非必须）**(我有，所以用了)** 以下材料四选一 带有学校名称，学校公章（如有），个人信息及有效期的学生证 （申请过程中使用了） 带有学校名称，入学日期和学校公章的录取通知书（推荐） （未使用） 学信网的个人学籍报告或学校出具的在读证明（最好是学校信纸头的），最好是英文版的（推荐） （使用了，将中文报告用网页翻译成英文然后截的图） 学期课表等Github支持的其他认证材料（不推荐） （未使用） 开始申请注意！以下全程都不要开魔法，github要你的位置的时候就允许！ 进入Github benefits 选择学生优惠 最好使用学校的edu邮箱，通过几率会增大 可以按我的写，我写的是 I want to learn coding and try to make contribution to the community. I want to do my best to improve myself and the community. 然后根据申请上传材料，尽量把链接复制到手机上，用手机拍照，不然会因为没拍照而被拒。 我用的申请材料：(这些材料中尽量出现学校名称和日期，这个也是被拒的理由之一) 学信网学籍认证，翻译成了英文。 学生证。 成绩单 学生卡 这些是我在10几次的申请中的使用材料。 最后一次的血泪教训： 修改个人资料，一定要把 user profile填完整！ 包括Name、Bio一定要填上自己的真实姓名和学校。 如果实在不行，我还把头像换成了自己的证件照… 我最最最最没想到的，我是因为这个username多次被拒绝，在设置里改成自己的名字之后就通过了。 经过修改这个名字，我的申请就迅速通过了。 下面开始享受自己的学生福利吧！","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"学生认证","slug":"学生认证","permalink":"https://jsblog.fun/tags/%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/"}]},{"title":"stable diffusion的colab部署","slug":"本地运行colab以及stabble本地部署","date":"2023-04-01T07:15:00.000Z","updated":"2023-04-16T12:13:29.807Z","comments":true,"path":"2023/04/01/本地运行colab以及stabble本地部署/","link":"","permalink":"https://jsblog.fun/2023/04/01/%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8Ccolab%E4%BB%A5%E5%8F%8Astabble%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/","excerpt":"本地化使用colab笔记本以及ai绘图软件的colab部署","text":"本地化使用colab笔记本以及ai绘图软件的colab部署 首先，准备一下使用的ai绘图github地址： webui：https://github.com/sd-webui/stable-diffusion-webui 本地化google colab不知道为什么，我感觉这一步并没有什么作用 juypter notebook连接到云端: 1234jupyter notebook \\ --NotebookApp.allow_origin=&#x27;https://colab.research.google.com&#x27; \\ --port=8888 \\ --NotebookApp.port_retries=0 使用google colab部署SD先打开 google colab 以下地址在github项目fastSD中的fast_stable_diffusion_AUTOMATIC1111.ipynb。 连接到谷歌云端硬盘并下载模型打开如下笔记本： 打开后先连接到Google 云端硬盘 连接后点击左边的文件，新建一个Model文件夹 然后选中，复制文件路径 然后在第一步命令和第二步命令之间添加一段代码： 代码中添加如下内容： 12#cd后面的是你的硬盘的地址，上一步复制来的 wget后面的链接是模型的地址 可以下载2-3个，存在google云端硬盘里之后使用!cd /content/gdrive/MyDrive/Model; wget https://civitai.com/api/download/models/16677 --content-disposition 然后运行，就会发现模型下载到了google云端硬盘中的Model里。 下面讲一下怎么下载模型，进入civitai，选择一个你喜欢的模型，如果没注册的话需要进行注册。 进入Model的界面后，对下载按钮右键，复制下载的地址 至此，重复上面的步骤，将自己喜欢的模型放在Model文件里，准备进行下一步啦~ 注意：执行完后把添加的这段删除掉哦 构建stable diffusion web ui首先要确定我们的运行时是GPU运行时： 然后确认一下是GPU运行时 保存就可以了。 然后逐步安装运行各步，直到Model Download&#x2F;Load这一步 这里填上之前下载模型的地址，然后点击左上角的运行按钮。 然后一步步安装、执行就可以啦，直到出现下面的链接： 然后点击这个链接，就可以使用模型啦！ 下面就可以根据prompt生成自己的图片：","categories":[{"name":"Ai","slug":"Ai","permalink":"https://jsblog.fun/categories/Ai/"}],"tags":[{"name":"Ai绘图","slug":"Ai绘图","permalink":"https://jsblog.fun/tags/Ai%E7%BB%98%E5%9B%BE/"}]},{"title":"通过修改注册表使用office copilot","slug":"office copilot使用","date":"2023-03-30T13:30:00.000Z","updated":"2023-04-16T12:11:33.438Z","comments":true,"path":"2023/03/30/office copilot使用/","link":"","permalink":"https://jsblog.fun/2023/03/30/office%20copilot%E4%BD%BF%E7%94%A8/","excerpt":"通过修改注册表的方式提前体验office copilot","text":"通过修改注册表的方式提前体验office copilot 2023年4月14日更新： 此方法已经失效了，现在即使注册表正确，也不会显示copilot，等待正式版本吧。 通过修改注册表使用office copilot学习于：https://www.cnblogs.com/ranxi169/p/17272151.html 以及：https://www.bilibili.com/read/cv22739951/ 第一步要确定你的Mcrosoft365的版本，只有个人版、家庭版和企业版（E5）才可以用（据说是这样，我是买的企业版。） 1. 先退出预览体验计划如果你出现下一步中的修改注册表的 UpdateChannel的数据一直自动修改成原来的数值，请一定要进行这一步 在搜搜框搜索预览体验计划： 然后取消掉勾勾： 然后再修改注册表 2. 修改注册表以更新word到2305首先打开注册表编辑器： win+R打开运行后输入regedit 进入到注册表的 计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\ClickToRun\\Configuration 修改以下内容 频道和ID对应关系，转载自孤飞 1234567891011121314151617AudienceId | AudienceData | ChannelEA4A4090-DE26-49D7-93C1-91BFF9E53FC3 | Dogfood::DevMainF3260CF1-A92C-4C75-B02E-D64C0A86A968 | Dogfood::CC834504CC-DC55-4C6D-9E71-E024D0253F6D | Dogfood::FRDCC4A7726F-06EA-48E2-A13A-9D78849EB706 | Dogfood::DCEXTB61285DD-D9F7-41F2-9757-8F61CBA4E9C8 | Microsoft::DevMain5462EEE5-1E97-495B-9370-853CD873BB07 | Microsoft::CC9A3B7FF2-58ED-40FD-ADD5-1E5158059D1C | Microsoft::FRDCF4F024C8-D611-4748-A7E0-02B6E754C0FE | Microsoft::DC1D2D2EA6-1680-4C56-AC58-A441C8C24FF9 | Microsoft::LTSC5440FD1F-7ECB-4221-8110-145EFAA6372F | Insiders::DevMain | Beta64256AFE-F5D9-4F86-8936-8840A6A4F5BE | Insiders::CC | Current PreviewB8F9B850-328D-4355-9145-C59439A0C4CF | Insiders::FRDC | Semi-Annual Preview492350F6-3A01-4F97-B9C0-C7C6DDF67D60 | Production::CC | Current55336B82-A18D-4DD6-B5F6-9E5095C314A6 | Production::MEC | Monthly Enterprise7FFBC6BF-BC32-4F92-8982-F9DD17FD3114 | Production::DC | Semi-AnnualF2E724C1-748F-4B47-8FB8-8E0D210E9208 | Production::LTSC | Perpetual2019 将以下内容的值修改 AudienceData -&gt; Dogfood::DevMain AudienceID -&gt; ea4a4090-de26-49d7-93c1-91bff9e53fc3 CDNbaseurl -&gt; http://officecdn.microsoft.com/pr/ea4a4090-de26-49d7-93c1-91bff9e53fc3 UpdateChannel与Updateurl -&gt; http://officecdn.microsoft.com/pr/ea4a4090-de26-49d7-93c1-91bff9e53fc3 3. 更新word打开一个随便word文档 文件-&gt;账户-&gt;更新 应该会自动进行更新，将版本更新到2305： 4. 修改注册表以开启copliot进入注册表中的目录： 1计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Common\\ExperimentConfigs\\ExternalFeatureOverrides\\word 直接放在地址栏里就可以，我当时是看不到这个位置的。 新建一个字符串&#x2F;值： 数值名称：Microsoft.Office.Word.CoPilotExperiment 数值数据：true 至此，重启word应该就能够使用copliot了。 5. 正式使用copliot重启之后，出现copliot即为成功 但是美中不足的是，现在的copliot只能用英语，而且我测试的时候，感觉copliot比较智障。 至此，享受你的Copliot吧！","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"office copilot","slug":"office-copilot","permalink":"https://jsblog.fun/tags/office-copilot/"}]},{"title":"hexo发生error：spawn failed错误的解决方法","slug":"hexo发生error：spawn failed错误的解决方法","date":"2023-03-27T06:30:00.000Z","updated":"2023-04-16T12:11:04.313Z","comments":true,"path":"2023/03/27/hexo发生error：spawn failed错误的解决方法/","link":"","permalink":"https://jsblog.fun/2023/03/27/hexo%E5%8F%91%E7%94%9Ferror%EF%BC%9Aspawn%20failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","excerpt":"spawn failed错误的解决方法","text":"spawn failed错误的解决方法 问题描述：先是出现错误： 1error：spawn failed... 然后经过一些博客的操作会出现以下问题： 1fatal: cannot lock ref &#x27;HEAD&#x27;: unable to resolve reference HEAD: Invalid argument error: src refspec 或者： 1error: src refspec HEAD does not match any.等等 总结一下： 问题大多是因为git 进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。 解决办法： 删除.deploy_git文件夹; 输入git config –global core.autocrlf false 然后，依次执行： 123hexo cleanhexo ghexo d 问题解决。暴力直接，有效。————————————————本文转载于HuangTLhit的文章，原文链接：https://blog.csdn.net/HTL2018/article/details/106876940","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"解决报错","slug":"解决报错","permalink":"https://jsblog.fun/tags/%E8%A7%A3%E5%86%B3%E6%8A%A5%E9%94%99/"}]},{"title":"Typora设置图片的自动上传保存","slug":"Typora设置自动上传图片","date":"2023-03-27T06:23:00.000Z","updated":"2023-04-16T12:12:10.042Z","comments":true,"path":"2023/03/27/Typora设置自动上传图片/","link":"","permalink":"https://jsblog.fun/2023/03/27/Typora%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/","excerpt":"Typora设置图片自动上传七牛云图床并转换url","text":"Typora设置图片自动上传七牛云图床并转换url 每次使用Typora的时候，总是不敢插入图片。 因为每次插入图片，你一不小心变动位置或者移动文件，源图片就会失效。 所以今天我尝试将图片自动上传到储存端，保证图片的永久保存。 1. 准备图床首先选择一下图床，用于在云端储存我的图片。 这里我有两个选择： 阿里云oss：一年9块钱，40GB存储空间。 ​ 购买地址：阿里云oss 七牛云：免费，每个月10GB 七牛云有优惠卷，但是用完和阿里云差不多，也是每个月40GB 另外，还有一个教育邮箱一年免费40GB的活动，因此我准备使用七牛云来搭建图床。 七牛云校园开发者成长计划 ​ 它还附赠了好多服务，截图一下： 校园用户免费使用一年，暂时先使用这个作为图床。 2. 安装PicGo并配置七牛云图床从PicGo github下载2.4.0-beta.0版本。 因为我个人比较喜欢尝鲜新功能，所以选了最新版，追求稳定的可以选择前一个版本稳定版。 下载完成之后安装、打开： PicGo切换到七牛云配置界面： 配置如图所示， 其中AccessKey和SecretKey需要到其幸运右上角头像这里进行查找： 点击后复制这两项： Bucket是创建空间的空间名，我们先创建空间： Bucket是这个： 设定访问网址： 进入空间最后的域名管理-&gt;绑定域名 然后配置一下CNAME，这里有官方教程：CNAME如何配置，配置成功之后如下图： 注意！存储区域一定要根据自己存储区域来设置： 七牛云的存储区域（华东 z0，华北 z1，华南 z2，北美 na0，东南亚 as0 ），一定要根据你空间所在的区域，填对应的代码。 如果不存储区域设置错误，它会显示如下错误（血与泪的教训）： 123456789101112132023-03-27 13:37:12 [PicGo ERROR] ------Error Stack Begin------Error: read file error at D:\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:38189 at async Promise.all (index 0) at async Object.handle (D:\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:37138) at async $e.doTransform (D:\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:16679) at async $e.start (D:\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:15916) at async Tt.upload (D:\\PicGo\\resources\\app.asar\\node_modules\\picgo\\dist\\index.cjs.js:1:71270) at async Object.upload (D:\\PicGo\\resources\\app.asar\\background.js:2:661590) at async zn (D:\\PicGo\\resources\\app.asar\\background.js:2:664240) at async D:\\PicGo\\resources\\app.asar\\background.js:2:665314-------Error Stack End------- 2. 安装PicGo-core命令行(2023-04-15)经过这半个多月的使用，我发现PicGo app经常会卡死，第一次打开app也比较慢，经常会占用大量资源。 所以我考虑使用PicGo-core，命令行、轻量化、占用资源更少。 先从Typora处安装，出现ftp错误 会出现这个错误： 下载好了也会出现错误，所以我选择手动安装 12345678910111213141516171819202122232425#全局安装PicGo-core&gt; npm install picgo -g&gt; picgo #试一下安装是否成功，成果的话会出现命令选项#如下：C:\\Users\\用户名&gt;picgoUsage: picgo [options] [command]Options: -v, --version output the version number -d, --debug debug mode -s, --silent silent mode -c, --config &lt;path&gt; set config path -p, --proxy &lt;url&gt; set proxy for uploading -h, --help display help for commandCommands: install|add [options] &lt;plugins...&gt; install picgo plugin uninstall|rm &lt;plugins...&gt; uninstall picgo plugin update [options] &lt;plugins...&gt; update picgo plugin set|config &lt;module&gt; [name] configure config of picgo modules upload|u [input...] upload, go go go use [module] use modules of picgo init [options] &lt;template&gt; [project] create picgo plugin&#x27;s development templates i18n [lang] change picgo language help [command] display help for command 手动安装后进入C:\\Users\\用户名\\.picgo修改配置文件config.json修改配置文件： 123456789101112131415&#123; &quot;picBed&quot;: &#123; &quot;current&quot;: &quot;qiniu&quot;, &quot;qiniu&quot;:&#123; &quot;accessKey&quot;: &quot;这里输入七牛云密钥的AK&quot;, &quot;secretKey&quot;: &quot;这里输入七牛云密钥的SK&quot;, &quot;bucket&quot;: &quot;输入你的域名空间名称&quot;, &quot;url&quot;: &quot;输入你的图床存储域名&quot;, &quot;area&quot;: &quot;填写区域代码&quot;, &quot;options&quot;: &quot;&quot;, &quot;path&quot;: &quot;img/ 这里可以写你的储存后缀&quot; &#125; &#125;, &quot;picgoPlugins&quot;: &#123;&#125;&#125; 这样就配置完成了，然后使用Typora测试一下 验证成功即可在Typora中使用， PicGo-core出现的问题：问题1如果上传过后自动输入的url文件后缀名变成了pngundefined 1https://XXXX.COM//img/image-XXXX.pngundefined 是由于config.json文件未包含 &quot;options&quot;: &quot;&quot;,，即使设置成空的也要加入，不然就会这样。 问题2npm安装的时候： 1npm WARN deprecated @types/bson@4.2.0: This is a stub types definition. bson provides its own type definitions, so you do not need this installed. 经测试，这样我安装没什么问题，只是个警告而已。 也可以更新一下npm 12npm -vnpm install -g npm 3. 配置Typora这是配置的最后一步，终于要完成自动上传图片了。 进入Typora，选择偏好设置： 进入偏好设置后选择图像，进行进一步设置 4. 测试能否顺利上传终于！Typora的自动上传图片功能配置完成！ 向Typora里粘贴一下图片试试能否正常上传。 上传成功后可以在PicGo相册中查看到上传的图片。 注意：一定要开着PicGo程序哦~","categories":[{"name":"markdown","slug":"markdown","permalink":"https://jsblog.fun/categories/markdown/"}],"tags":[{"name":"图床设置","slug":"图床设置","permalink":"https://jsblog.fun/tags/%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/"}]},{"title":"(win11)将新建markdown文件添加到鼠标菜单栏","slug":"将新建markdown文件添加到鼠标菜单栏","date":"2023-03-21T05:31:00.000Z","updated":"2023-04-16T12:15:15.280Z","comments":true,"path":"2023/03/21/将新建markdown文件添加到鼠标菜单栏/","link":"","permalink":"https://jsblog.fun/2023/03/21/%E5%B0%86%E6%96%B0%E5%BB%BAmarkdown%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E9%BC%A0%E6%A0%87%E8%8F%9C%E5%8D%95%E6%A0%8F/","excerpt":"实现右键新建菜单栏有markdown文件","text":"实现右键新建菜单栏有markdown文件 方法一 注册表修改法https://zhuanlan.zhihu.com/p/152310631 经测试我不可以用 方法二 新建文本文档改后缀新建以下文本文档，将txt改为reg 123456789101112Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\.md]@=&quot;MarkdownFile&quot;&quot;PerceivedType&quot;=&quot;text&quot;&quot;Content Type&quot;=&quot;text/plain&quot;[HKEY_CLASSES_ROOT\\.md\\ShellNew][HKEY_CLASSES_ROOT\\MarkdownFile]@=&quot;Markdown文档&quot;[HKEY_CLASSES_ROOT\\MarkdownFile\\DefaultIcon]@=&quot;%SystemRoot%\\system32\\imageres.dll,-102&quot;[HKEY_CLASSES_ROOT\\MarkdownFile\\shell][HKEY_CLASSES_ROOT\\MarkdownFile\\shell\\open] 运行后，不可用，依然没有新建markdown选项 方法三 这次搜索关键词为win11 右键新建markdown文件经测试可行：https://blog.csdn.net/qq_53055033/article/details/127442997 注意我是重启之后就可行了。","categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://jsblog.fun/tags/markdown/"}]}],"categories":[{"name":"Daily","slug":"Daily","permalink":"https://jsblog.fun/categories/Daily/"},{"name":"Blog","slug":"Blog","permalink":"https://jsblog.fun/categories/Blog/"},{"name":"Ai","slug":"Ai","permalink":"https://jsblog.fun/categories/Ai/"},{"name":"Virtual Machine","slug":"Virtual-Machine","permalink":"https://jsblog.fun/categories/Virtual-Machine/"},{"name":"markdown","slug":"markdown","permalink":"https://jsblog.fun/categories/markdown/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://jsblog.fun/tags/Github/"},{"name":"博客美化","slug":"博客美化","permalink":"https://jsblog.fun/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"},{"name":"Hexo","slug":"Hexo","permalink":"https://jsblog.fun/tags/Hexo/"},{"name":"Next","slug":"Next","permalink":"https://jsblog.fun/tags/Next/"},{"name":"博客小站","slug":"博客小站","permalink":"https://jsblog.fun/tags/%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%AB%99/"},{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://jsblog.fun/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"},{"name":"Claude","slug":"Claude","permalink":"https://jsblog.fun/tags/Claude/"},{"name":"企业邮箱","slug":"企业邮箱","permalink":"https://jsblog.fun/tags/%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1/"},{"name":"VPS","slug":"VPS","permalink":"https://jsblog.fun/tags/VPS/"},{"name":"学生认证","slug":"学生认证","permalink":"https://jsblog.fun/tags/%E5%AD%A6%E7%94%9F%E8%AE%A4%E8%AF%81/"},{"name":"Ai绘图","slug":"Ai绘图","permalink":"https://jsblog.fun/tags/Ai%E7%BB%98%E5%9B%BE/"},{"name":"office copilot","slug":"office-copilot","permalink":"https://jsblog.fun/tags/office-copilot/"},{"name":"解决报错","slug":"解决报错","permalink":"https://jsblog.fun/tags/%E8%A7%A3%E5%86%B3%E6%8A%A5%E9%94%99/"},{"name":"图床设置","slug":"图床设置","permalink":"https://jsblog.fun/tags/%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/"},{"name":"markdown","slug":"markdown","permalink":"https://jsblog.fun/tags/markdown/"}]}